#!/usr/bin/env bash
set -e
set -o pipefail

RUN_DIR="$PWD"
TESTS_DIR="$RUN_DIR/test"
COMPOSE_HOOK="$RUN_DIR/compose-hook.test"
TEMP_DIR=$(mktemp -dt compose-testXXXXX)
FAILED=0
COVER_DIR="$TEMP_DIR/cover"

function run_test() {
  REMOTE_DIR="$TEMP_DIR/remote"
  LOCAL_DIR="$TEMP_DIR/local"

  rm -rf "$REMOTE_DIR" "$LOCAL_DIR"
  mkdir -p "$COVER_DIR"

  COMPOSE_HOOK_ARGS=""
  eval $(grep COMPOSE_HOOK_ARGS $TESTS_DIR/$1)

  # passed as env to mock docker-compose to make commands fail
  MOCK_COMPOSE_FAIL_COMMAND=""
  eval $(grep MOCK_COMPOSE_FAIL_COMMAND $TESTS_DIR/$1)
  # how compose-hook should be invoked
  GIT_HOOK_INVOKE_HOW="pre-receive-stdin"
  eval $(grep GIT_HOOK_INVOKE_HOW $TESTS_DIR/$1)

  # setup empty "remote" repo with hook
  mkdir "$REMOTE_DIR"
  cd "$REMOTE_DIR"
  git --bare init -q .
  if [ "$GIT_HOOK_INVOKE_HOW" = "pre-receive-stdin" ] ; then
    echo -e "#!/bin/sh\nPATH=$TESTS_DIR:\$PATH MOCK_COMPOSE_FAIL_COMMAND=$MOCK_COMPOSE_FAIL_COMMAND $COMPOSE_HOOK -test.coverprofile $COVER_DIR/$1.out -- $COMPOSE_HOOK_ARGS" > hooks/pre-receive
    chmod +x hooks/pre-receive
  elif [ "$GIT_HOOK_INVOKE_HOW" = "pre-receive-args" ] ; then
    echo -e "#!/bin/sh\nwhile read old new ref ; do PATH=$TESTS_DIR:\$PATH MOCK_COMPOSE_FAIL_COMMAND=$MOCK_COMPOSE_FAIL_COMMAND $COMPOSE_HOOK -test.coverprofile $COVER_DIR/$1.out -- $COMPOSE_HOOK_ARGS \$old \$new \$ref ; done" > hooks/pre-receive
    chmod +x hooks/pre-receive
  elif [ "$GIT_HOOK_INVOKE_HOW" = "update-args" ] ; then
    echo -e "#!/bin/sh\nPATH=$TESTS_DIR:\$PATH MOCK_COMPOSE_FAIL_COMMAND=$MOCK_COMPOSE_FAIL_COMMAND $COMPOSE_HOOK -test.coverprofile $COVER_DIR/$1.out -- $COMPOSE_HOOK_ARGS \$2 \$3 \$1" > hooks/update
    chmod +x hooks/update
  fi

  # setup empty "local" repo to run test and push from
  mkdir "$LOCAL_DIR"
  cd "$LOCAL_DIR"
  git init -q .
  git config user.name "test"
  git config user.email "test@test.com"
  git remote add origin "$REMOTE_DIR"

  echo -n "$1... "

  # remove some git warnings and temp dir lines
  # trim line to fix weird trailing whitespace git remote behaviour
  # dumb term to stop old git versions that add control codes in remote stdout output
  # https://github.com/git/git/commits/master/sideband.c
  (TERM=dumb "$TESTS_DIR/$1" || true) \
    | sed 's/ *$//' \
    | (grep -v "coverage:" || true) \
    | (grep -v "PASS" || true) \
    | (grep -v "remote: warning: You appear to have cloned an empty repository." || true) \
    | (grep -v "$TEMP_DIR" || true) \
    > "$TEMP_DIR/actual"
  grep -A 1000 EXPECTED "$TESTS_DIR/$1" | tail -n+2 > "$TEMP_DIR/expected"

  if cmp -s "$TEMP_DIR/actual" "$TEMP_DIR/expected" ; then
    echo "PASS"
  else
    echo "FAILED"
    ls -l "$TEMP_DIR/actual" "$TEMP_DIR/expected"
    echo "=== actual:"
    cat "$TEMP_DIR/actual"
    echo "=== expected:"
    cat "$TEMP_DIR/expected"
    FAILED=1
  fi
}

go build
go test -cover -c -o compose-hook.test

if [ "$3" != "" ] ; then
  run_test "$3"
else
  for t in $(cd $TESTS_DIR; echo test_*) ; do
     run_test "$t"
  done

  echo -n "Test that failure exits non-zero..."
  if "$RUN_DIR"/compose-hook a 1>/dev/null ; then
    echo "FAILED"
    exit 1
  else
    echo "PASS"
  fi
fi

gocovmerge "$COVER_DIR"/*.out > "$RUN_DIR/coverage.out"
go tool cover "-html=$RUN_DIR/coverage.out" -o "$RUN_DIR/coverage.html"
go tool cover "-func=$RUN_DIR/coverage.out"

rm -rf "$TEMP_DIR"

if [ "$FAILED" = "1" ] ; then
  exit 1
fi
